<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on IT простым языком</title>
    <link>https://kee-reel.com/python/</link>
    <description>Recent content in Python on IT простым языком</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kee-reel.com/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python. Первый проект. Регистрация</title>
      <link>https://kee-reel.com/python/web-reg-and-auth/</link>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/web-reg-and-auth/</guid>
      <description>Эта статья из цикла статей &amp;ldquo;Первый проект&amp;rdquo;, в которых я шаг за шагом показываю как разработать систему, близкую по сложности к реальной.
В этой статье я реализую регистрацию, а в следующей &amp;ndash; авторизацию по логину/паролю. Для фреймворка Flask уже есть готовое решение для этой задачи: flask_login. С целью постижения глубинной природы вещей, я покажу как реализовать это самому, без использования сторонних библиотек.
Новые endpoint&amp;rsquo;ы Расширю простейший веб-сервер и добавлю двe новых конечных точки (endpont):</description>
    </item>
    
    <item>
      <title>Python. Первый проект</title>
      <link>https://kee-reel.com/python/first-project/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/first-project/</guid>
      <description>В этой статье я приведу пример задачи на ООП и покажу как её решить. После этого я дам несколько самостоятельных заданий.
Читаем ТЗ Представляем ситуацию &amp;ndash; ты пришёл работать в компанию, которая занимается продажей обучающих курсов. До тебя никто не занимался автоматизацией, и все задачи выполнялись вручную.
Директор даёт тебе такое техническое задание:
Создать сайт, на котором пользователи смогут зарегистрироваться Зарегистрированный пользователь может оплатить курс Оплата курса на данном этапе не встроена в сайт, и пользователь напрямую связывается с сотрудником компании Сотрудник компании может зайти на сайт под своим профилем, и отметить какой курс был куплен каким пользователем После оплаты пользователь может просматривать материалы курса Курс состоит из N занятий Каждое занятие является произвольной веб-страницей Кажется сложным, поэтому давай сначала продумаем архитектуру нашей системы.</description>
    </item>
    
    <item>
      <title>Python. Основы веб-сервера Flask</title>
      <link>https://kee-reel.com/python/web-server/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/web-server/</guid>
      <description>Представь, что ты написал скрипт, который может пригодиться кому-то кроме тебя &amp;ndash; как им поделиться?
У тебя есть три варианта:
Выложить исходный код в открытый доступ (например на GitHub) &amp;ndash; для этого пользователь твоей программы должен уметь запускать Python скрипты. Подготовить исполняемый файл (например через PyInstaller) &amp;ndash; скрипт будет готов к запуску, и пользователь сможет запустить его как обычное приложение. Развернуть веб-сервер, на котором будет исполняться твоя программа &amp;ndash; любой пользователь сможет воспользоваться ей через браузер.</description>
    </item>
    
    <item>
      <title>Python. Инкапсуляция</title>
      <link>https://kee-reel.com/python/incapsulation/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/incapsulation/</guid>
      <description>Эта статья является составной частью статьи про ООП &amp;ndash; если ты хочешь понять всю картину, то лучше начать с неё.
Инкапсуляция &amp;ndash; позволяет скрыть детали реализации.
Ты когда-нибудь пробовал разобрать свой телефон или ноутбук? Это очень сложный процесс, который как-будто специально сделан максимально трудоёмким для пользователя. Зачем это нужно его создателям?
Если бы это было очень просто, то ты бы мог залезть &amp;ldquo;просто посмотреть&amp;rdquo; и случайно что-то сломать в этом сложном устройстве.</description>
    </item>
    
    <item>
      <title>Python. Наследование классов</title>
      <link>https://kee-reel.com/python/inheritance/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/inheritance/</guid>
      <description>Эта статья является составной частью статьи про ООП &amp;ndash; если ты хочешь понять всю картину, то лучше начать с неё.
Наследование &amp;ndash; позволяет связать разные классы в иерархию таким образом, что мы можем в старших классах определить базовые функции, и переиспользовать их во всех классах наследниках.
Вот пример наследования:
У нас есть базовый класс Seat:
class Seat: def __init__(self, seat): self.seat = seat def take_a_seat(self): desc = self.get_description() print(f&amp;#39;Ты сел на {desc}&amp;#39;) def get_description(self): return f&amp;#39;сиденье из {self.</description>
    </item>
    
    <item>
      <title>Python. Полиморфизм</title>
      <link>https://kee-reel.com/python/polymorphism/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/polymorphism/</guid>
      <description>Эта статья является составной частью статьи про ООП &amp;ndash; если ты хочешь понять всю картину, то лучше начать с неё.
Полиморфизм в классах Полиморфизм &amp;ndash; позволяет единообразно работать с методами разных классов, наследованных от одного родительского класса.
Объясняю на примере &amp;ndash; перед тобой стоит три машины с коробкой-автоматом от разных производителей:
class Car: def __init__(self, manufacturer, horse_powers): def._manufacturer = manufacturer self._horse_powers = horse_powers def turn_on(self): print(f&amp;#39;Ты запустил двигатель у {def.</description>
    </item>
    
    <item>
      <title>Python. Принципы ООП</title>
      <link>https://kee-reel.com/python/oop/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/oop/</guid>
      <description>В объектно-ориентированном программировании есть 3 основных принципа:
Наследование Позволяет связать разные классы в иерархию таким образом, что мы можем в старших классах определить базовые функции, и переиспользовать их во всех классах наследниках.
Чтобы узнать более подробно перейди к отдельной статье про наследование.
Инкапсуляция Позволяет скрыть детали реализации.
Чтобы узнать более подробно перейди к отдельной статье про инкапсуляцию.
Полиморфизм Позволяет единообразно работать с методами разных классов, наследованных от одного родительского класса.</description>
    </item>
    
    <item>
      <title>Python. Классы</title>
      <link>https://kee-reel.com/python/classes/</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/classes/</guid>
      <description>Прежде чем мы перейдём к использованию классов, я расскажу откуда классы взялись &amp;ndash; про объектно-ориентированное программирование.
Объектно-ориентированное программирование (ООП) &amp;ndash; подход к написанию программ при котором:
Программа представляется в виде набора объектов и связей между ними Все объекты являются экземплярами классов Классы образуют иерархию наследования (про это в следующей статье) Сейчас расскажу подробно что это всё значит.
Объект В реальном мире мы с тобой постоянно взаимодействуем с какими-то объектами: стул, стол, кружка, телефон и т.</description>
    </item>
    
    <item>
      <title>Python. Функции</title>
      <link>https://kee-reel.com/python/functions/</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/functions/</guid>
      <description>Функция (function) &amp;ndash; это механизм, позволяющий вынести часть логики программы в отдельный блок, который можно многократно исполнять из разных мест прогаммы.
Вот пример определения функции:
# def -- сокращённо от слова define (определить) # У функции может не быть параметров: def someFunctionName(): value = 5 # return (вернуть) - оператор, который возвращает переданное значение в место вызова функции return value + 2 # Всё, что находится после return не будет исполнено, так как после return программа выйдет # из функции, и продолжит исполнение в месте вызова функции print(&amp;#39;This will never be printed&amp;#39;) # У функции может быть несколько параметров def anotherFunctionName(functionParameter1, functionParameter2): # Внутри функций можно вызывать другие функции value = someFunctionName() # Вернёт 7 result = (functionParameter1 + functionParameter2) * 10 return result a = 3 # Чтобы вызвать функцию необходимо написать её имя, а затем в круглых скобках указать её параметры # Количество и позиции параметров должны быть такими же, как в определении функции b = someFunctionName() # Вернёт 7 c = anotherFunctionName(a, b) # Вернёт 180 print(c) # Вывод: # 100 Это называется определением функции:</description>
    </item>
    
    <item>
      <title>Python. Циклы</title>
      <link>https://kee-reel.com/python/loops/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/loops/</guid>
      <description>Цикл (loop) &amp;ndash; это механизм, позволяющий описать выполнение множества одинаковых действий.
Есть две разновидности циклов:
for while Цикл for Вот пример определения цикла for:
some_list = [1, 2, 3, 4, 5, 0] # Читается как: для каждого значения value в some_list выполнить for value in some_list: # value это временная переменная, которая создаётся при входе в цикл # Ты можешь назвать её как угодно, не обязательно value -- например, если бы список назывался students, то я бы назвал переменную student # В эту переменную по очереди забираются значения из списка some_list print(value) # Вывод: # 1 # 2 # 3 # 4 # 5 # 0 Вместо some_list может быть любой контейнер &amp;ndash; для списка и кортежа цикл будет проходить по значениям, а для словаря цикл будет проходить по всем ключам:</description>
    </item>
    
    <item>
      <title>Python. Условия</title>
      <link>https://kee-reel.com/python/conditions/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/conditions/</guid>
      <description>Условие (condition) &amp;ndash; это механизм, позволяющий выполнить действие, только если выполняется определённое условие.
Вот пример определения условия:
this_is_true = True this_is_false = False condition_message = &amp;#39;Condition: &amp;#39; if this_is_false: condition_message += &amp;#39;one&amp;#39; elif this_is_true or this_is_false: condition_message += &amp;#39;two&amp;#39; elif this_is_true: condition_message += &amp;#39;three&amp;#39; else: condition_message += &amp;#39;four&amp;#39; print(condition_message) # Вывод: # Condition: two Давай разберём:
Секция под if (если) исполнится если указанное условие истинно. Все секции в Python отделяются отступом: табуляцией &amp;ldquo;Tab&amp;rdquo; или равным количеством пробелов.</description>
    </item>
    
    <item>
      <title>Python. Контейнеры</title>
      <link>https://kee-reel.com/python/containers/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/containers/</guid>
      <description>Контейнеры это незаменимый инструмент, при работе с наборами данных &amp;ndash; давай их изучим. Существуют следующие типы контейнеров:
Списки Кортежи Словари Списки Зачастую, тебе не хватает переменной, чтобы вместить все данные &amp;ndash; например, тебе нужно посчитать среднюю оценку для всей группы в университете по какому-то предмету (человек 25, например). Ты мог бы создать переменные (&amp;ldquo;student_1&amp;rdquo;, &amp;ldquo;student_2&amp;rdquo;, &amp;ldquo;student_3&amp;rdquo; и так далее), но это была бы очень монотонная и занудная работа.
К счастью разработчики очень ленивые, и давно придумали решение этой проблемы &amp;ndash; список (list).</description>
    </item>
    
    <item>
      <title>Python. Переменные и операции с ними</title>
      <link>https://kee-reel.com/python/variables-and-operations/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/variables-and-operations/</guid>
      <description>Одним из ключевых понятий в программировании является понятие &amp;ldquo;переменная&amp;rdquo;.
Переменные хранят значения, используемые в программе.
Типы переменных Значения могут быть следующих типов:
bool &amp;ndash; булевое значение (boolean). Может принимать значение True (истина) или False (ложь) int &amp;ndash; целочислое число (integer). Например: 0, 55, -66 float &amp;ndash; вещественное число. Например: 0.123, 5.55555, -6.62156 str &amp;ndash; строка (string). Например: &amp;lsquo;это&amp;rsquo;, &amp;lsquo;пример любой&amp;rsquo;, &amp;lsquo;строки!&amp;rsquo; Вот пример определения переменных в Python:
is_car_in_motion = True kilometers_per_second = 85 fuel_left = 0.</description>
    </item>
    
    <item>
      <title>Python. Введение</title>
      <link>https://kee-reel.com/python/intro/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/intro/</guid>
      <description>В этой статье я расскажу что такое языки программирования и в частности про Python.
Сразу скажу, я сторонник обучения сверху-вниз &amp;ndash; сначала объясняю глобально, а потом перехожу к частностям. Это помогает построить в голове карту предметной области, при помощи которой тебе будет проще в будущем систематизировать свои знания.
Что такое язык программирования Язык программирования &amp;ndash; это язык на котором можно описать последовательность инструкций в том виде, в котором его сможет прочитать компьютер.</description>
    </item>
    
    <item>
      <title>Python. Установка окружения</title>
      <link>https://kee-reel.com/python/environment-setup/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kee-reel.com/python/environment-setup/</guid>
      <description>Для того, чтобы начать разрабатывать на Python, давай установим все необходимые инструменты разработки.
Сперва установи сам Python, а затем мы с тобой посмотрим на два инструмента разработки:
Командная строка + текстовый редактор IDE PyCharm Установка Открой официальный сайт Python и скачай установщик для своей операционной системы: https://www.python.org/downloads/
Установка на всех операционных системах стандартная, должна пройти без проблем.
Если проблемы всё же возникли, то напиши мне &amp;ndash; я помогу и дополню описание этого шага.</description>
    </item>
    
  </channel>
</rss>
